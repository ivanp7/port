#!/bin/sh
set -eu
PROJECT_DIR="$(realpath -- "$(dirname -- "$0")")"

###############################################################################
# Set variables
###############################################################################

: ${PROJECT_NAME:="port"}
: ${PROJECT_DESCRIPTION:="A library to aid writing code that is portable between CPU and OpenCL."}
: ${PROJECT_VERSION:="1.0"}

IDIR="include"
SDIR="src"
CDEV_SUBDIR="cdev"
HOST_SUBDIR="host"
HOST_COMMON_SUBDIR="common"
HOST_CPU_SUBDIR="cpu"
HOST_OPENCL_SUBDIR="opencl"

TDIR="test"
ODIR="build"

BUILD_TOOLS_DIR="tools"

EMBEDDED_CDEV_VAR_PREFIX="${PROJECT_NAME}_embedded_cdev"
EMBEDDED_CDEV_VAR_GENERATOR="${BUILD_TOOLS_DIR}/embed_cdev_code.sh"
EMBEDDED_CDEV_VAR_FILE="${SDIR}/${HOST_SUBDIR}/${HOST_OPENCL_SUBDIR}/embedded_cdev.var.c"

TEST_CODE_URL="https://gist.githubusercontent.com/ivanp7/506fe8dc053952fd4a960666814cfd9a/raw"

: ${LIBRARY_NAME:="${PROJECT_NAME}"}

OUT_LIBRARY_STATIC="lib${LIBRARY_NAME}.a"
OUT_LIBRARY_SHARED="lib${LIBRARY_NAME}.so"
OUT_TEST_APPLICATION="${PROJECT_NAME}-tests"

PKG_CONF="${LIBRARY_NAME}.pc"
NINJA="build.ninja"

: ${CC:="gcc"}
: ${AR:="ar"}

###############################################################################
# Parse command line arguments
###############################################################################

usage () { echo "usage:"; grep '^\s*[^*]) # ' "$0" | sed -E 's,(.)\) # ,-\1  ,'; exit 0; }
optlist () { grep '^\s*[^*]) # ' "$0" | sed -E 's,^\s*(.)\) # .*,\1,' | tr -d '\n'; }

[ "$#" = 0 ] && usage
while getopts ":$(optlist)" arg
do
    case "$arg" in
        s) # output: build shared library (.so) instead of static (.a)
            OUTPUT_LIBRARY_SHARED="true"
            ;;

        t) # output: build test application
            OUTPUT_TEST_APPLICATION="true"
            ;;

        d) # build type: debug (conflicts with -o and -p)
            [ "${BUILD_TYPE:-}" ] && { echo "Build type cannot be specified multiple times"; exit 1; }
            BUILD_TYPE="debug"
            ;;

        p) # build type: profiling (conflicts with -d and -o)
            [ "${BUILD_TYPE:-}" ] && { echo "Build type cannot be specified multiple times"; exit 1; }
            BUILD_TYPE="profiling"
            ;;

        o) # build type: optimized (conflicts with -d and -p)
            [ "${BUILD_TYPE:-}" ] && { echo "Build type cannot be specified multiple times"; exit 1; }
            BUILD_TYPE="optimized"
            ;;

        E) # feature: embed compute device code
            FEATURE_EMBED_CDEV="true"
            ;;

        L) # feature: link compute device code
            FEATURE_LINK_CDEV="true"
            ;;

        C) # feature: link CPU-specific host code
            FEATURE_LINK_HOST_CPU="true"
            ;;

        O) # feature: link OpenCL-specific host code
            FEATURE_LINK_HOST_OPENCL="true"
            ;;

        I) # feature: use 64-bit integers as standard integer type instead of 32-bit integers
            FEATURE_DEFAULT_INTEGER_64="true"
            ;;

        F) # feature: use 64-bit floats as standard float type instead of 32-bit floats
            FEATURE_DEFAULT_FLOAT_64="true"
            ;;

        *) # display help
            usage
    esac
done

[ "${BUILD_TYPE:-}" ] || { echo "Build type is not specified"; exit 1; }

###############################################################################
# Set flags
###############################################################################

: ${INSTALL_PREFIX:="${PROJECT_DIR}"}

: ${INSTALL_IDIR:="${IDIR}"}
: ${INSTALL_LDIR:="${ODIR}"}

CFLAGS_OPENCL="$(pkg-config --cflags OpenCL) -DCL_TARGET_OPENCL_VERSION=300"
[ "${FEATURE_LINK_HOST_OPENCL:-}" ] &&
    LFLAGS_OPENCL="$(pkg-config --libs OpenCL)" ||
    LFLAGS_OPENCL=""

CFLAGS_COMMON="$CFLAGS_OPENCL \
${FEATURE_DEFAULT_INTEGER_64:+"-DPORT_FEATURE_DEFAULT_INTEGER_64"} \
${FEATURE_DEFAULT_FLOAT_64:+"-DPORT_FEATURE_DEFAULT_FLOAT_64"}"
LFLAGS_COMMON="$LFLAGS_OPENCL"

case "${BUILD_TYPE:-}" in
    "debug") CFLAGS_BUILD_TYPE="-O0 -g3 -ggdb" ;; # -Og causes <optimized out> errors in gdb
    "profiling") CFLAGS_BUILD_TYPE="-O2 -flto -g0 -DNDEBUG -pg" ;;
    "optimized") CFLAGS_BUILD_TYPE="-O2 -flto -g0 -DNDEBUG" ;;
    *) echo "Unknown build type"; exit 1
esac

case "$CC" in
    gcc) CFLAGS_DIAGNOSTICS="-fdiagnostics-color=always" ;;
    clang) CFLAGS_DIAGNOSTICS="-fcolor-diagnostics" ;;
esac

CFLAGS="-march=native -pipe -std=c17 -Wall -Wextra -Wpedantic -pedantic-errors \
-Wmissing-prototypes -Wstrict-prototypes -Wold-style-definition -Wno-psabi \
-I${PROJECT_DIR}/${IDIR} \
$CFLAGS_COMMON \
$CFLAGS_BUILD_TYPE \
${OUTPUT_LIBRARY_SHARED:+"-fPIC"}"

CFLAGS_TESTS="-march=native -pipe -std=c17 -Wall -Wextra -pedantic-errors -Wno-psabi -O0 -g3 -ggdb \
-I${PROJECT_DIR}/${IDIR} -I${PROJECT_DIR}/${ODIR}/${TDIR} \
$CFLAGS_COMMON"
LFLAGS_TESTS="-lm"

LFLAGS="$LFLAGS_COMMON"

###############################################################################
# Generate pkg-config file
###############################################################################

cat <<  _EOF_ > "$PKG_CONF"
Name: ${LIBRARY_NAME}
Description: ${PROJECT_DESCRIPTION}
Version: ${PROJECT_VERSION}
Cflags: $CFLAGS_COMMON -I${INSTALL_PREFIX}/${INSTALL_IDIR}
_EOF_

if [ "${OUTPUT_LIBRARY_SHARED:-}" ]
then
    echo "Libs: $LFLAGS_COMMON -L${INSTALL_PREFIX}/${INSTALL_LDIR} -l${LIBRARY_NAME}" >> "${PROJECT_DIR}/${PKG_CONF}"
else
    echo "Libs: $LFLAGS_COMMON -Wl,--whole-archive ${INSTALL_PREFIX}/${INSTALL_LDIR}/${OUT_LIBRARY_STATIC} -Wl,--no-whole-archive" >> "${PROJECT_DIR}/${PKG_CONF}"
fi

###############################################################################
# Generate build.ninja
###############################################################################

cat <<  _EOF_ > "${PROJECT_DIR}/${NINJA}"
cflags = $CFLAGS ${CFLAGS_DIAGNOSTICS:-}
cflags_tests = $CFLAGS_TESTS
lflags = $LFLAGS
lflags_tests = $LFLAGS_TESTS


rule cc
    description = cc \$in
    depfile = \$out.d
    deps = gcc
    command = ${CC} -MMD -MF \$out.d -c -o \$out \$in \$cflags \$cflags_custom

rule ar
    description = ar \$in
    command = ${AR} rcs \$out \$in

rule link
    description = link \$in
    command = ${CC} -o \$out \$in \$cflags \$cflags_custom \$lflags \$lflags_custom

rule embed
    description = generate \$out
    command = IDIR="${IDIR}" SDIR="${SDIR}" CDEV_SUBDIR="${CDEV_SUBDIR}" VAR_PREFIX="${EMBEDDED_CDEV_VAR_PREFIX}" ${EMBEDDED_CDEV_VAR_GENERATOR} \$out "${PROJECT_NAME}" "${PROJECT_DIR}"

rule download
    description = download \$out
    command = curl -s \$url -o \$out


_EOF_

OBJECTS=""

build_directory ()
{
    local dir="$1"
    local custom_cflags="${2:-}"
    local no_output="${3:-}"

    for src in $(cd -- "${PROJECT_DIR}"; find "$dir" -type f -name "*.c")
    do
        obj="${src%.c}.o"
        OBJECTS="$OBJECTS ${ODIR}/$obj"

        if [ -z "$no_output" ]
        then
            cat <<  _EOF_ >> "${PROJECT_DIR}/${NINJA}"
build ${ODIR}/$obj: cc $src
_EOF_

            [ -z "$custom_cflags" ] ||
                cat <<  _EOF_ >> "${PROJECT_DIR}/${NINJA}"
    cflags = \$${custom_cflags}
_EOF_
        fi
    done

    [ "$no_output" ] ||
        echo >> "${PROJECT_DIR}/${NINJA}"
}

if [ "${FEATURE_EMBED_CDEV:-}" ]
then
    obj="${EMBEDDED_CDEV_VAR_FILE%.c}.o"
    OBJECTS="$OBJECTS ${ODIR}/$obj"

    cat <<  _EOF_ >> "${PROJECT_DIR}/${NINJA}"

build ${ODIR}/${EMBEDDED_CDEV_VAR_FILE}: embed | $(cd -- "${PROJECT_DIR}"; find \
"${IDIR}/${PROJECT_NAME}/${CDEV_SUBDIR}" -type f -name "*.h" -printf ' %p') $(cd -- "${PROJECT_DIR}"; find \
"${SDIR}/${CDEV_SUBDIR}" -type f -name "*.c" -printf ' %p')

build ${ODIR}/$obj: cc ${ODIR}/${EMBEDDED_CDEV_VAR_FILE}

_EOF_
fi

[ -z "${FEATURE_LINK_CDEV:-}" ] ||
    build_directory "${SDIR}/${CDEV_SUBDIR}"

build_directory "${SDIR}/${HOST_SUBDIR}/${HOST_COMMON_SUBDIR}"

[ -z "${FEATURE_LINK_HOST_CPU:-}" ] ||
    build_directory "${SDIR}/${HOST_SUBDIR}/${HOST_CPU_SUBDIR}"

[ -z "${FEATURE_LINK_HOST_OPENCL:-}" ] ||
    build_directory "${SDIR}/${HOST_SUBDIR}/${HOST_OPENCL_SUBDIR}"

echo >> "${PROJECT_DIR}/${NINJA}"

if [ "${OUTPUT_LIBRARY_SHARED:-}" ]
then
    cat <<  _EOF_ >> "${PROJECT_DIR}/${NINJA}"
build ${ODIR}/${OUT_LIBRARY_SHARED}: link $OBJECTS
    lflags_custom = -shared -rdynamic

build library: phony ${ODIR}/${OUT_LIBRARY_SHARED}
_EOF_
else
    cat <<  _EOF_ >> "${PROJECT_DIR}/${NINJA}"
build ${ODIR}/${OUT_LIBRARY_STATIC}: ar $OBJECTS

build library: phony ${ODIR}/${OUT_LIBRARY_STATIC}
_EOF_
fi

echo "default library" >> "${PROJECT_DIR}/${NINJA}"

cat <<  _EOF_ >> "${PROJECT_DIR}/${NINJA}"


build ${ODIR}/${TDIR}/test.h: download
    url = ${TEST_CODE_URL}/test.h
build ${ODIR}/${TDIR}/test.c: download
    url = ${TEST_CODE_URL}/test.c
build ${ODIR}/${TDIR}/test.o: cc ${ODIR}/${TDIR}/test.c || ${ODIR}/${TDIR}/test.h
    cflags_custom = \$cflags_tests

_EOF_

OBJECTS="${ODIR}/${TDIR}/test.o"

[ "${FEATURE_LINK_CDEV}" ] &&
    build_directory "${SDIR}/${CDEV_SUBDIR}" "" no_output ||
    build_directory "${SDIR}/${CDEV_SUBDIR}"

for src in $(cd -- "${PROJECT_DIR}"; find "${TDIR}" -type f -name "*.c" | sort)
do
    obj="${src%.c}.o"
    OBJECTS="$OBJECTS ${ODIR}/$obj"

    cat <<  _EOF_ >> "${PROJECT_DIR}/${NINJA}"
build ${ODIR}/$obj: cc $src || ${ODIR}/${TDIR}/test.h
    cflags_custom = \$cflags_tests
_EOF_
done

cat <<  _EOF_ >> "${PROJECT_DIR}/${NINJA}"

build ${ODIR}/${OUT_TEST_APPLICATION}: link $OBJECTS
    cflags_custom = \$cflags_tests
    lflags_custom = \$lflags_tests

build tests: phony ${ODIR}/${OUT_TEST_APPLICATION}
_EOF_

[ -z "${OUTPUT_TEST_APPLICATION:-}" ] ||
    echo "default tests" >> "${PROJECT_DIR}/${NINJA}"

